using Clang

const C_header = "src/gswteos-10.h"
const C_URI    = "https://github.com/TEOS-10/GSW-C/"
const Rfn      = "../README.md"
const Repodir  = "src/"
const RMnew    = "../README.md.new"

const RMIntros  = [
"# GSW.jl\n\nGSW.jl is a Julia wrapper for ",
"[GSW-C](https://github.com/TEOS-10/GSW-C)", # Link
", which is the C implementation of the Thermodynamic Equation of Seawater 2010 (TEOS-10).\n\n",
]


function get_gitsrc(uri, repodir)
  if isdir(repodir)
    gitrepo = LibGit2.GitRepo(repodir)
  else
    gitrepo = LibGit2.clone(uri, repodir)
  end
  ref   = LibGit2.head(gitrepo)
  hash  = LibGit2.GitHash(ref)
  lhash = string(hash)
  shash = string(LibGit2.GitShortHash(hash, 7))

  return (lhash, shash)
end

function ff(x, y)
  return ismatch(r"gsw", y)
end


lhash, shash = get_gitsrc(C_URI, Repodir)

uri_hash = C_URI * "tree/" * lhash
tm       = Dates.now(Dates.UTC)
tmstr    = Dates.format(tm, "Y/mm/dd HH:MM")

RMIntros[2] = "[GSW-C#$(shash)]($(uri_hash)) (generated by `utils/generate.jl` at $(tmstr))"

readme = readstring(Rfn)
mtchs  = match(r"(\# GSW.jl.*?)(^\#\#.*)"ms, readme)

readme_txt = join(RMIntros, "") * mtchs.captures[2]

write(RMnew, readme_txt)
quit()

hdrs = readstring(C_header)

context = wrap_c.init(
output_file = "../$(Repodir)gen_gswteos10.jl",
common_file = "../$(Repodir)gen_gswteos_h.jl",
headers = [C_header],
clang_includes = includes,
clang_diagnostics = true,
header_wrapped=(x,y)->ff(x,y),#(@show x; ismatch(r"gsw", y)),
header_library=x->"libgswteos",
# rewriter = rewriter
)

context.options = wrap_c.InternalOptions(true, true)

run(context)

#@show hdrs
