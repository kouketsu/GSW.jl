using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgswteos"], :libgswteos),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/kouketsu/GSWCBuilder/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.aarch64-linux-gnu.tar.gz", "a6f3838ba32f1a113c421faa9a93aa9dabff6f91696e72a8c9152a1c0654a5a4"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GSWC.v3.0.5.aarch64-linux-musl.tar.gz", "61eb96f2f400a02395a37cdb5e879636ed1e6b07e993c4dcd01778b5634c6a84"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GSWC.v3.0.5.arm-linux-gnueabihf.tar.gz", "0194cb4c07ce4d32c86eea072d2faa1087abf85e2d771dd10dbbff472ab19ec9"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GSWC.v3.0.5.arm-linux-musleabihf.tar.gz", "da1e80f316197849e7657d786448de50f627dccb15500a658e4eec5f680c9f79"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.i686-linux-gnu.tar.gz", "f5f3af17be981ec9c963dd4c758b6f2651c8596299aaae8065949ddec2b1800b"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GSWC.v3.0.5.i686-linux-musl.tar.gz", "a1f4f39a52ced46b81eba8d385045a882ee2231063e2a551f83395263d3f0002"),
    Windows(:i686) => ("$bin_prefix/GSWC.v3.0.5.i686-w64-mingw32.tar.gz", "8a6a5ffd64ea761db05b52882105066dd558c5a3461d287e3516e9cc9f57889b"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.powerpc64le-linux-gnu.tar.gz", "58c38ad2ab2c1fd47bcc6b4268f7a46c00edfebf688fdfe386396eabdad19774"),
    MacOS(:x86_64) => ("$bin_prefix/GSWC.v3.0.5.x86_64-apple-darwin14.tar.gz", "9707aefdc8414cc3660c411e1564f830c67b4dacd97450e6edec77ea4329dd32"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.x86_64-linux-gnu.tar.gz", "d79ac2a43a659801dc823becb2f536476e41d0b305cc1720191f1a6a08a05d86"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GSWC.v3.0.5.x86_64-linux-musl.tar.gz", "41af47a03e103376ee497e8ab162c2c5717938f2b144ac1c9406574ea336f323"),
    FreeBSD(:x86_64) => ("$bin_prefix/GSWC.v3.0.5.x86_64-unknown-freebsd11.1.tar.gz", "24f1f27e391fb8fc71d4a25d7f4650a87fa9783874b9023ef702a4d666a77a5b"),
    Windows(:x86_64) => ("$bin_prefix/GSWC.v3.0.5.x86_64-w64-mingw32.tar.gz", "8aa049d7f9c8dfd10449fe60ed3b7d1d2568aeacd2c728c81ff8f9d6a47af60c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)




# using BinaryProvider


# C_URL    = "https://github.com/TEOS-10/GSW-C/archive/master.zip"
# SLibName = "libgswteos-10.so.GSW."
# LibName  = "libgswteos-10.$(Libdl.dlext)"

# @BinDeps.setup

# libgswteos = library_dependency("libgswteos", aliases = [LibName])

# provides(Sources, URI(C_URL), libgswteos, unpacked_dir = "GSW-C-master")

# srcdir = joinpath(BinDeps.depsdir(libgswteos), "src", "GSW-C-master")
# prefix = joinpath(BinDeps.depsdir(libgswteos), "usr", "lib")

# provides(SimpleBuild,
#   (@build_steps begin
#     `mkdir -p $prefix`
#     GetSources(libgswteos)
#     @build_steps begin
#         ChangeDirectory(srcdir)
#         `make`
#         `cp $SLibName $(prefix)/$LibName`
#     end
# end), libgswteos) #, os = :Unix)


# @BinDeps.install Dict(:libgswteos => :libgswteos)
