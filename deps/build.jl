using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgswteos"], :libgswteos),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/kouketsu/GSWCBuilder/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.aarch64-linux-gnu.tar.gz", "92ed16a88415b051818b47db7323fe2f89ad75ba954d1aba10e0ff1f6e749838"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GSWC.v3.0.5.aarch64-linux-musl.tar.gz", "466ab0c948891f6f908569b47612f99f3861034c8b514c9e9b5b3fc8eb713f33"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GSWC.v3.0.5.arm-linux-gnueabihf.tar.gz", "29dd432307ee29892797ad860f2e4a2dd0c386481b302b9b5b22722810ff91d9"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GSWC.v3.0.5.arm-linux-musleabihf.tar.gz", "bb336a49de9238ceb0936fa08c54b0ffde68866550a8617930e81d972bee81f9"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.i686-linux-gnu.tar.gz", "f5ac29d0ffa1784b9764a1b3b6ce07d68c57357baab9cb2d580743128deae33e"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GSWC.v3.0.5.i686-linux-musl.tar.gz", "dcc560c364567dd42b0f300f0bb80bc9cd9ddee84e6a6539b1f95cdb918b5cc3"),
    Windows(:i686) => ("$bin_prefix/GSWC.v3.0.5.i686-w64-mingw32.tar.gz", "02a2e4ee240b5e785ef3c30a5cb30d02f9200e4ac5e99dc7da1115c0946967ca"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.powerpc64le-linux-gnu.tar.gz", "f0e9538489362951bf91a9d618e5b61d2165a4807269a10da6c9773885f3c596"),
    MacOS(:x86_64) => ("$bin_prefix/GSWC.v3.0.5.x86_64-apple-darwin14.tar.gz", "5eb2f07c6431fe85f7c9711055520c583aae9dd346481d6c0de0c33669c2f9ca"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GSWC.v3.0.5.x86_64-linux-gnu.tar.gz", "87d48da98e6287e8a7b11d2280b8a2cfd8d147d0d10b583192c3c7eddb8475f1"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GSWC.v3.0.5.x86_64-linux-musl.tar.gz", "cdc7ef9f34270021d2e3f22db73136ead982fa7edd4354057f6fc0089fb1ee76"),
    FreeBSD(:x86_64) => ("$bin_prefix/GSWC.v3.0.5.x86_64-unknown-freebsd11.1.tar.gz", "1fef5a5dea29ccca7e518ee82d97d20c841ae104265e159d1c9674e933902a2b"),
    Windows(:x86_64) => ("$bin_prefix/GSWC.v3.0.5.x86_64-w64-mingw32.tar.gz", "e98c4de6a7263b370e6b8e507a1bb39691537eb389a2caa45fd6fa070ed51f1d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
